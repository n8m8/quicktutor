# Front End
1) Make listings prettier on GUI
~~~2) Send request from GUI to accept listing~~~
3) Edit profile screen (note: I think there should be no distinction between class taken and class enrolled. let's just do classes for now so we can get this done w/o having to mess around with other stuff that can just introduce bugs and make it take longer to finish)
  a) Implement /profile/addclass route
    {classDept: 'MATH', classNum: '121'}
  b) Implement /profile/removeclass route
    {classDept: 'MATH', classNum: '121'}
  c) Implement /profile/changescreenname route
    {newName: 'John Doe'}
4) Add password reset button (the way I did it, it just emails a new random password... depending on time Nate can give ability to type a new one but this should be low priority)
5) Tell user what password strength requirements are
6) New Request screen
  a) Make it prettier
  b) Change the class name field from a textbox to a dropdown. use the /profile/get route (there are no parameters), they get returned like this:
  {
    "classes": [{
      "classid": 1,
      "stringName": "ACCT 101"
      }, {
      "classid": 200,
      "stringName": "ANTH 601"
      }
    ],
    "email": "qtadmin@case.edu",
    "screenname": "admin"
  }


# Back End
~~~1) Fix memory leak bug with socketio, clear dict on logout~~~
~~~2) Send a socketIO upon posting a request to push notifications for other users~~~
3) Write web service that handles accepting request
  a) Add pair to database
  b) Open a socketIO between tutee and tutor to start chat
~~~4) Fix bug allowing unconfirmed user to log in~~~


#group reports 
Your written report should consist of two parts: a group report and
individual reports. The group report should contain a thorough
description of your project goals and current status. It should
describe the detailed architecture of the project and what features it
has. It should describe the UI, how testing was done and test cases
were incorporated and how the code was documented. It should
describe at least one hypothetical usage scenario and how the software would
actually be used in that context. It should compare the status to the
project draft that was submitted at the start of the project. Based on
this comparison, it should identify what was accomplished, what was
not, and lessons learned at the team level (both in terms of technical
lessons as well as project management.)

#individual reports
The individual reports should be appended to the group report. There
should be one report for each person. This report should describe
which aspect of the project you were responsible for and a description
of how you achieved your objectives and what issues you ran into (from
your weekly logs). Then, you should write about the lessons you
learned while doing your part, and any other thoughts and insights you
had while working on this project.

#presentation
The presentation and demo in class are a synopsis of your report. This
will be 30 minutes long. It should begin with a segment overviewing
the goals, implementation architecture and features, UI and testing.
Each team member will then present their individual work. Finally,
there should be a discussion of lessons learned, followed by a
detailed demo of the system built. Note that the demo is worth 15%
of the final grade. Therefore, you should carefully design it to show all
the capabilities of your system in a nice way.

# Later lower priority stuff
1) Flask flashing
2) SocketIO everything
3) Touch up presentation layer
4) Fix chatbox bugs on GUI
